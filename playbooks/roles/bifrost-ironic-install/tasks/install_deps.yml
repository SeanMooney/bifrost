- name: "Warn if deprecated variable nginx_port is set"
  debug:
    msg: >
      WARNING - nginx_port is a deprecated variable and support will be
      removed during the Newton cycle.
  when: nginx_port is defined
- name: "Update Package Cache"
  apt: update_cache=yes
  when: ansible_os_family == 'Debian'
- name: "Install packages"
  action: "{{ ansible_pkg_mgr }} name={{ item }} state=present"
  with_items: required_packages
# Step required for Ubuntu 14.10
- name: "Install Ubuntu 14.10 (and later) packages"
  action: "{{ ansible_pkg_mgr }} name={{ item }} state=present"
  with_items:
    - pxelinux
  when: >
    ansible_distribution_version|version_compare('14.10', '>=') and
    ansible_distribution == 'Ubuntu'
- name: "If running in CI, set source install facts just to be sure"
  set_fact:
    shade_source_install: true
    ironicclient_source_install: true
  when: ci_testing | bool == true
- name: "If VENV is set in the environment, enable installation into venv"
  set_fact:
    enable_venv: true
  when: lookup('env', 'VENV') | length > 0
# NOTE(TheJulia) While we don't necessarilly require /opt/stack any longer
# and it should already be created by the Ansible setup, we will leave this
# here for the time being.
- name: "Ensure /opt/stack is present"
  file: name=/opt/stack state=directory owner=root group=root
- name: "proliantutils - Install from pip"
  include: pip_install.yml
     package=proliantutils
     state=present
  when: skip_install is not defined and testing | bool != true
- name: "UcsSdk - Install from pip"
  include: pip_install.yml
    package=UcsSdk
    version=0.8.1.9
  when: skip_install is not defined and testing | bool != true
- name: "Install iSCSI client if PXE driver support is enabled"
  action: "{{ ansible_pkg_mgr }} name={{ iscsi_client_package }} state=present"
  when: skip_install is not defined and enable_pxe_drivers | bool == true
- name: "Shade - Install"
  include: pip_install.yml
    package=shade
    state=latest
    sourcedir={{ shade_git_folder }}
    source_install={{ shade_source_install }}
  when: skip_install is not defined
- name: "dib-utils - install from pip"
  include: pip_install.yml
    package=dib-utils
    state=present
  when: skip_install is not defined and install_dib == true
- name: "Diskimage-builder - Install"
  include: pip_install.yml
    package=diskimage-builder
    sourcedir={{ dib_git_folder }}
    source_install=true
  when: skip_install is not defined and install_dib == true
- name: "Ironic Client - Install"
  include: pip_install.yml
    package=python-ironicclient
    state=latest
    sourcedir={{ ironicclient_git_folder }}
    source_install={{ ironicclient_source_install }}
  when: skip_install is not defined
- name: "Install configparser in venv if using"
  include: pip_install.yml package=configparser virtualenv=bifrost_venv_dir
  when: skip_install is not defined and (enable_venv | bool == true)
- name: "Install pymysql in venv if using"
  include: pip_install.yml package=pymysql virtualenv=bifrost_venv_dir
  when: skip_install is not defined and (enable_venv | bool == true)
- name: "Install Ironic using pip"
  include: pip_install.yml
    package=ironic
    state=latest
    sourcedir={{ ironic_git_folder }}
    source_install=true
  when: skip_install is not defined
- name: "Create an ironic service group"
  group:
    name: "ironic"
- name: "Create an ironic service user"
  user:
    name: "ironic"
    group: "ironic"
- name: "Ensure /etc/ironic exists"
  file:
    name: "/etc/ironic"
    state: directory
    owner: "ironic"
    group: "ironic"
    mode: 0755
# Note(TheJulia): The rootwrap copies will need to be re-tooled
# to possibly directly retreive current files if a source install
# is not utilized.
- name: "Copy rootwrap.conf from ironic source folder"
  copy:
    src: "{{ ironic_git_folder }}/etc/ironic/rootwrap.conf"
    dest: "/etc/ironic/rootwrap.conf"
    mode: 0644
    owner: root
    group: root
  when: skip_install is not defined and enable_pxe_drivers | bool == true
- name: "Copy rootwrap.d contents from ironic source folder"
  copy:
    src: "{{ ironic_git_folder }}/etc/ironic/rootwrap.d/"
    dest: "/etc/ironic/rootwrap.d"
    mode: 0644
    owner: root
    group: root
    directory_mode: yes
  when: skip_install is not defined and enable_pxe_drivers | bool == true
- name: "Copy policy.json to /etc/ironic"
  copy:
    src: "{{ ironic_git_folder }}/etc/ironic/policy.json"
    dest: "/etc/ironic/"
    owner: "ironic"
    group: "ironic"
    mode: 0644
- name: "Do RedHat-specific changes for libvirt"
  include: redhat_libvirt_changes.yml
  when: ansible_os_family == 'RedHat'
- name: "Add ironic user to virtualization group"
  user: name=ironic group="{{ virt_group }}" append=yes
  when: testing == true
- name: "Create SSH directory for ironic user"
  local_action: >
    file
    path=/home/ironic/.ssh
    owner=ironic
    group=ironic
    mode=0700
    state=directory
  when: testing == true
- name: "Check for ironic user SSH key"
  local_action: stat path=/home/ironic/.ssh/id_rsa
  register: test_ironic_pvt_key
- name: "Generate SSH key for ironic user"
  local_action: command ssh-keygen -f /home/ironic/.ssh/id_rsa -N ""
  when: testing == true and test_ironic_pvt_key.stat.exists == false
- name: "Set ownership on ironic SSH private key"
  local_action: >
    file
    name=/home/ironic/.ssh/id_rsa
    owner=ironic
    group=ironic
    mode=0600
    state=file
  when: testing == true and test_ironic_pvt_key.stat.exists == false
- name: "Set ownership on ironic SSH public key"
  local_action: >
    file
    name=/home/ironic/.ssh/id_rsa.pub
    owner=ironic
    group=ironic
    mode=0644
    state=file
  when: testing == true and test_ironic_pvt_key.stat.exists == false
- name: "Create authorized_keys file for ironic user"
  command: >
    cp -p /home/ironic/.ssh/id_rsa.pub /home/ironic/.ssh/authorized_keys
  when: testing == true
- name: "Create service folder if systemd template is defined"
  file:
    path: "{{ init_dest_dir }}"
    state: directory
    mode: 0755
  when: init_template == 'systemd_template.j2'
- name: "Install ironic-inspector to permit use of inspection interface"
  include: inspector_install.yml
  when: enable_inspector | bool
- name: "Get ironic-api & ironic-conductor install location"
  shell: echo $(dirname $(which ironic-api))
  register: ironic_install_prefix
  environment: "{{ bifrost_venv_env if enable_venv else '{}' }}"
- name: "Set permissions for /var/lib/ironic for the ironic user"
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    owner: "ironic"
    group: "ironic"
  with_items:
    - "/var/lib/ironic"
    - "/var/lib/ironic/images"
- name: "Place ironic services"
  template:
    src: "{{ init_template }}"
    dest: "{{ init_dest_dir }}{{item.service_name}}{{ init_ext }}"
    owner: "root"
    group: "root"
  with_items:
    - { service_path: "{{ ironic_install_prefix.stdout }}", service_name: 'ironic-api', username: 'ironic', args: '--config-file /etc/ironic/ironic.conf'}
    - { service_path: "{{ ironic_install_prefix.stdout }}", service_name: 'ironic-conductor', username: 'ironic', args: '--config-file /etc/ironic/ironic.conf'}
- name: "Setup Inventory Hosts Directory"
  file:
    path: "/etc/dnsmasq.d/bifrost.hosts.d"
    state: directory
    owner: "root"
    group: "root"
    mode: 0755
  when: "{{inventory_dhcp|bool}}"
- name: "Setup Inventory DHCP Hosts Directory"
  file:
    path: "/etc/dnsmasq.d/bifrost.dhcp-hosts.d"
    state: directory
    owner: "root"
    group: "root"
    mode: 0755
  when: "{{inventory_dhcp|bool}}"
# NOTE(Shrews) When testing, we want to use our custom dnsmasq.conf file,
# not the one supplied by libvirt. And the libvirt started dnsmasq processes
# are not controlled by upstart, so we need to manually kill those.
- name: "Look for libvirt dnsmasq config"
  stat: path=/etc/dnsmasq.d/libvirt-bin
  register: test_libvirt_dnsmasq
  when: "{{include_dhcp_server|bool}}"
- name: "Disable libvirt dnsmasq config"
  command: mv /etc/dnsmasq.d/libvirt-bin /etc/dnsmasq.d/libvirt-bin~
  when: >
     include_dhcp_server | bool == true and
     test_libvirt_dnsmasq.stat.exists | bool == true and
     testing|bool == true
- name: "Stop existing libvirt dnsmasq processes"
  command: killall -w dnsmasq
  when: "{{testing|bool and include_dhcp_server|bool}}"
# NOTE(Shrews) We need to enable ip forwarding for the libvirt bridge to
# operate properly with dnsmasq. This should be done before starting dnsmasq.
- name: "Enable IP forwarding in sysctl"
  sysctl:
    name: "net.ipv4.ip_forward"
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  when: testing == true
# NOTE(Shrews) Ubuntu packaging+apparmor issue prevents libvirt from loading
# the ROM from /usr/share/misc.
- name: "Look for sgabios in {{ sgabios_dir }}"
  stat: path={{ sgabios_dir }}/sgabios.bin
  register: test_sgabios_qemu
- name: "Look for sgabios in /usr/share/misc"
  stat: path=/usr/share/misc/sgabios.bin
  register: test_sgabios_misc
- name: "Place sgabios.bin"
  command: cp /usr/share/misc/sgabios.bin /usr/share/qemu/sgabios.bin
  when: >
    test_sgabios_qemu == false and
    test_sgabios_misc == true and
    testing == true
